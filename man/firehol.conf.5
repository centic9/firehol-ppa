.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FIREHOL.CONF 5"
.TH FIREHOL.CONF 5 "2003-06-09" 
.SH "NAME"
firehol.conf \- Configuration file for firehol(1)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIfirehol.conf\fR is the configuration file for \fIfirehol\fR\|(1), which creates
an iptables firewall from the simple rules in this file.
.PP
This file is parsed as a \fIbash\fR\|(1) script, so it's no problem to use
variables or complex bashisms.
.SH "Commands"
.IX Header "Commands"
.Sh "interface <real interface> <name> [optional rule parameters]"
.IX Subsection "interface <real interface> <name> [optional rule parameters]"
.RS 2
The interface command creates a firewall for protecting the host the
firewall is running, from the given interface.
The default interface policy is drop, so that if no subcommands are given,
the firewall will just drop all incoming and outgoing traffic using
this interface.
.Sp
\fIParameters\fR
.IX Subsection "Parameters"
.IP "\(bu real interface" 2
.IX Item "real interface"
This is the interface name as shown by ip link show. Generally anything
iptables accepts, including the pattern character + (the plus sign),
is valid. The plus sign after some text will match all interfaces that
start with this text. It is allowed to use more than one interfaces
separated by spaces, but all of them should be given within one 
quoted argument. Example:
.RS 2
.Sp
.RS 2
interface \*(L"eth0 eth1 ppp0\*(R" myname
.RE
.RE
.RS 2
.RE
.IP "\(bu name" 2
.IX Item "name"
This is a name for this interface. Generally you should use short names
(10 characters max) without spaces or other symbols. You should not use 
the same name more than once in FireHOL primary commands.
.IP "\(bu optional rule parameters" 2
.IX Item "optional rule parameters"
This is a set of rules that allow further restriction of the traffic that
gets matched for this interface. See section \fBOptional Rules Parameters\fR
for more information. Examples:
.RS 2
.Sp
.RS 2
interface eth0 intranet src 10.0.0.0/16
.Sp
interface eth0 internet src not \*(L"$UNROUTABLE_IPS\*(R" (note: \s-1UNROUTABLE_IPS\s0 is a variable defined by FireHOL that includes all IPs that should not be routable by the Internet). 
.RE
.RE
.RS 2
.RE
.RE
.RS 2
.RE
.Sh "router <name> [optional rule parameters]"
.IX Subsection "router <name> [optional rule parameters]"
.RS 2
The router command creates a firewall for the traffic passing through 
the host running the firewall. The only acceptable policy on all router
commands is return and therefore the policy subcommand cannot be used on
routers. This means that no packets are dropped in a router. Packets not
matched by any router command will be dropped at the end of the firewall.
.Sp
\fIParameters\fR
.IX Subsection "Parameters"
.IP "\(bu name" 2
.IX Item "name"
This is a name for this router. The same restrictions of interface names
apply here too.
.IP "\(bu optional rule parameters" 2
.IX Item "optional rule parameters"
This is a set of rules that allow further restriction of the traffic that
gets matched for this router. See section \fBOptional Rules Parameters\fR
for more information. 
.RE
.RS 2
.Sp
\fIDescription\fR
.IX Subsection "Description"
.Sp
.RS 2
Router statements produce similar iptables commands the interface
statements produce. For each router statement an in_\fIname\fR and
an out_\fIname\fR chain are produced to match the traffic in both
directions of the router.
.Sp
To match some client or server traffic the administrator has to specify
the input/output interface or the source/destination of the request. All
inface/outface, src/dst optional rule parameters can be given either on
the router statement in which case will be applied to all subcommands
for this router, or on each subcommand within a router. Both are valid. 
.Sp
For example:
.Sp
.RS 2
router mylan inface ppp+ outface eth0
  server http accept
  client smtp accept
.RE
.RE
.RS 2
.Sp
The above says: Define a router that matches all requests that originate
from some \s-1PPP\s0 interface and go out to eth0. There is an \s-1HTTP\s0 server in
eth0 that client from the \s-1PPP\s0 interfaces are allowed to reach.
Clients on eth0 are allowed to get \s-1SMTP\s0 traffic from the \s-1PPP\s0 interfaces.
.Sp
While:
.Sp
.RS 2
router mylan
  server http accept inface ppp+ outface eth0
  server smtp accept inface eth0 outface ppp+
.RE
.RE
.RS 2
.Sp
The above says: Define a router that matches any kind of forwarded traffic.
For \s-1HTTP\s0 traffic the clients are on a \s-1PPP\s0 interface and the servers on eth0.
For \s-1SMTP\s0 traffic the clients are on a eth0 interface and the servers o a 
\&\s-1PPP\s0 interface.
.Sp
Please note that in the second example the \s-1SMTP\s0 traffic is matched again
with a server subcommand, not a client (as in the first example).
.Sp
The client subcommand reverses all the optional rules that are applied 
indirectly to it. Indirect rule parameters are those that are inherited
from the parent command (router in this case).
To make it simple, for FireHOL a client is: \*(L"a server with all the
implicit optional rule parameters reversed\*(R".
.Sp
So, in the first example, the client simply flipped the inface and outface
rules defined at the router and became an \s-1SMTP\s0 server.
In the second example there is nothing to be flipped, so server and client
are exactly the same.
.Sp
I suggest to use client subcommands in routers only if you have 
inface/outface or src/dst in the router statements. If you are building
routers like the second example, don't use client, it is confusing.
.Sp
Older versions of FireHOL did not allow server and client subcommands
in routers. Only the route subcommand was allowed. Today, route is just
an alias for server and can be used only in routers, not interfaces.
.Sp
Any number of router statements can exist. Since the policy is \s-1RETURN\s0
on all of them, any traffic not matched by a router will continue to be
checked against the second. 
.RE
.RE
.RS 2
.RE
.SH "Subcommands"
.IX Header "Subcommands"
Subcommands must be given within Primary commands.
.Sh "policy <action>"
.IX Subsection "policy <action>"
.RS 2
The policy subcommand defines the default policy for an interface.
.Sp
This directive accepts all the actions specified in the section
\&\fBActions\fR.
.Sp
The policy of routers cannot be changed and is always \s-1RETURN\s0. 
.RE
.Sh "protection [reverse] <type>"
.IX Subsection "protection [reverse] <type>"
.RS 2
The protection subcommand sets a number of protection rules 
on an interface.
.Sp
In router configurations, protections are setup on inface.
.Sp
\fIParameters\fR
.IX Subsection "Parameters"
.IP "reverse" 2
.IX Item "reverse"
The reverse keyword will make the protections setup on outface.
.IP "type" 2
.IX Item "type"
One of the following values:
.RS 2
.IP "strong, full or all" 2
.IX Item "strong, full or all"
Turns on all known protections
.IP "fragments" 2
.IX Item "fragments"
Drops all packet fragments. Please note that most probably this
rule will never match anything since iptables reconstructs all
packets automatically, before the iptables firewall rules are 
processed, when its connection tracker is running.
.IP "new\-tcp\-w/o\-syn" 2
.IX Item "new-tcp-w/o-syn"
Drops all \s-1TCP\s0 packets that initiate a socket but have no the \s-1SYN\s0 bit set.
.IP "syn-floods [requests/sec [burst]]" 2
.IX Item "syn-floods [requests/sec [burst]]"
Allows only a certain amount of new \s-1TCP\s0 connections per second. The
optional two arguments [requests/sec] and [burst] are used by this
rule in order to provide control on the number of connections to be
allowed. The default is 100 connections per second that can match 50
(it was 4 in v1.38 and before) packets initially (this is implemented
using the limit module of iptables: see man iptables for more).
Note that this rule applies to all connections attempted regardless 
of their final result (rejected, dropped, established, etc). Therefore
it might not be a good idea to set it too low. 
.IP "icmp-floods [requests/sec [burst]]" 2
.IX Item "icmp-floods [requests/sec [burst]]"
Allows only a certain amount of \s-1ICMP\s0 echo requests per second. The 
optional two arguments [requests/sec] and [burst] are used by this
rule in order to provide control on the number of connections to be
allowed. The default is 100 connections per second that can match 50
(it was 4 in v1.38 and before) packets initially (this is implemented
using the limit module of iptables: see man iptables for more). 
.IP "malformed-xmas" 2
.IX Item "malformed-xmas"
Drops all \s-1TCP\s0 packets that have all \s-1TCP\s0 flags set. 
.IP "malformed-null" 2
.IX Item "malformed-null"
Drops all \s-1TCP\s0 packets that have all \s-1TCP\s0 flags unset. 
.IP "malformed-bad" 2
.IX Item "malformed-bad"
Drops all \s-1TCP\s0 packets that have illegal combinations of \s-1TCP\s0 flags set. 
.RE
.RS 2
.RE
.RE
.RS 2
.RE
.Sh "server <service> <action> [optional rule parameters]"
.IX Subsection "server <service> <action> [optional rule parameters]"
.RS 2
The server subcommand defines a server of a service. For FireHOL a 
server is the destination of a request, and even if this is more
complex for multi-socket services, for FireHOL a server always
accepts requests.
.Sp
The optional rule parameters given to the parent primary command
(interface or router) are inherited by the server as they have
been given.
.Sp
This subcommand can be used on both interfaces and routers.
.Sp
\fIParameters\fR
.IX Subsection "Parameters"
.IP "service" 2
.IX Item "service"
This is one of the supported service names. The command accepts more
than one services in the same argument if they are separated by 
space and quoted as a single argument. Example:
.RS 2
.Sp
.RS 2
server smtp accept
.Sp
server \*(L"smtp pop3 imap\*(R" accept
.RE
.RE
.RS 2
.RE
.IP "action" 2
.IX Item "action"
This tells FireHOL what to do with the traffic matching this rule.
.Sp
FireHOL supports the actions defined in the section \fBActions\fR.
.IP "optional rule parameters" 2
.IX Item "optional rule parameters"
This is a set of rules that allow further restriction of the 
traffic that gets matched by this rule. See section 
\&\fBOptional Rules Parameters\fR for more information. Examples:
.RS 2
.Sp
.RS 2
server smtp accept src 1.2.3.4
.Sp
server smtp accept log \*(L"its mail\*(R" src 1.2.3.4 
.RE
.RE
.RS 2
.RE
.RE
.RS 2
.RE
.Sh "client <service> <action> [optional rule parameters]"
.IX Subsection "client <service> <action> [optional rule parameters]"
.RS 2
The client subcommand defines a client of a service. For FireHOL
a client is the source of a request. FireHOL follows this simple
rule even on multi-socket complex protocols, so that for FireHOL
a client always sends requests.
The parameters are exactly the same with the server subcommand.
.Sp
The optional rule parameters given to the parent primary command
(interface or router) are inherited by the client, but they are
reversed. For an explanation of this please refer to the 
documentation of the router primary command.
.Sp
This subcommand can be used on both interfaces and routers.
.RE
.Sh "route <service> <action> [optional rule parameters]"
.IX Subsection "route <service> <action> [optional rule parameters]"
.RS 2
The route subcommand is an alias for the server command that
can be used only on routers, not interfaces.
.RE
.SH "Helper commands"
.IX Header "Helper commands"
.Sh "version <number>"
.IX Subsection "version <number>"
.RS 2
The version command states the FireHOL release the configuration file
was created for. In case the configuration file is newer than FireHOL,
FireHOL will deny to run it.
.Sp
This command is here to allow you or anyone else design and distribute 
FireHOL configuration files, while ensuring that the correct FireHOL
version is going to run them.
.Sp
The FireHOL release is increased every time the format of the
configuration file and the internals of FireHOL are changed.
.Sp
Since FireHOL v1.67 version is not required to be present in
every configuration file. 
.RE
.Sh "iptables <arguments>"
.IX Subsection "iptables <arguments>"
.RS 2
The iptables command passes all its arguments to the real iptables
command, during run\-time.
.Sp
You should not use /sbin/iptables directly to alter a FireHOL firewall
in its configurations. If you do, your commands will be run before
FireHOL activates its firewall and while the previous firewall is
still running. Also, since FireHOL will delete all previous firewall
rules in order to activate the new firewall, any changes you will
make, will be deleted too.
.Sp
Always use the iptables directive to hook iptables commands in a
FireHOL firewall. Nothing else. 
.RE
.Sh "masquerade [reverse | interface] [optional rule parameters]"
.IX Subsection "masquerade [reverse | interface] [optional rule parameters]"
.RS 2
Masquerading is a special from of \s-1SNAT\s0 (Source \s-1NAT\s0) that changes the
source of requests when they go out and replaces their original source
when replies come in. This way a Linux box can become an internet
router for a \s-1LAN\s0 of clients having unroutable \s-1IP\s0 addresses.
Masquerading takes care to re-map \s-1IP\s0 addresses and ports as required.
.Sp
Masquerading is \*(L"expensive\*(R" compared to \s-1SNAT\s0 because it checks the \s-1IP\s0
address of the ougoing interface every time for every packet, and 
therefore it is suggested that if you connect to the internet with
a static \s-1IP\s0 address, to prefer \s-1SNAT\s0.
.Sp
The masquerade helper sets up masquerading on the output of a network
interface (not the interface command, but a real network interface).
.Sp
If the masquerade command is placed within an interface command, its
network interface[s] will be used.
.Sp
If the masquerade command is placed within a router command that has
an outface defined, then the outface network interface[s] will be used.
.Sp
If placed within a router command but the keyword reverse is specified
and the router command has an inface defined, then the inface network
interface[s] will be used.
.Sp
If placed outside and before all primary commands, an interface (or
list of space separated interfaces, within double quotes) can be
specified on the masquerade command.
.Sp
In all cases, masquerade will setup itself on the output of the
given interface[s].
.Sp
Please note that if masquerade is used within some interface or router,
it does not respect the optional rule parameters given to this interface
or router command. Masquerade uses only its own optional rule parameters.
.Sp
inface and outface should not be given as parameters to masquerade 
(inface because iptables does not support this in the \s-1POSTROUTING\s0 chain,
and outface because it will be overwritten by the interface(s) mentioned
above).
.Sp
Finally, the masquerade helper will turn on \s-1FIREHOL_NAT\s0 and instruct the
kernel to do packet forwarding (like the router commands do).
.Sp
Examples:
.Sp
.RS 2
Before the first interface or router:
  masquerade eth0 src 10.0.0.0/8 dst not 10.0.0.0/8
.Sp
Within an interface rule to masquerade on the output of this interface:
  masquerade
.Sp
Within a router rule to masquerade on the output of the router's inface:
  masquerade reverse
.RE
.RE
.RS 2
.RE
.Sh "transparent_squid <port> <user> [optional rule parameters]"
.IX Subsection "transparent_squid <port> <user> [optional rule parameters]"
.RS 2
The transparent_squid helper sets up trasparent caching for \s-1HTTP\s0 traffic.
The squid proxy is assumed to be running on the firewall host at port 
\&\fIport\fR (\fIport\fR defaults to squid), with the credentials of the
local user \fIuser\fR (\fIuser\fR defaults to squid).
.Sp
The transparent_squid helper can be used for two kinds of traffic:
.IP "\(bu Incoming \s-1HTTP\s0 traffic" 2
.IX Item "Incoming HTTP traffic"
Incoming \s-1HTTP\s0 traffic, which is either targeted to the firewall host
or passing through the firewall host.
.Sp
The optional rule parameters can be used to specify which kind of 
incoming traffic to be catched (by using inface, src, dst, etc \*(--
outface should not be used here, because the rules generated are
placed before the routing decision and therefore the outgoing
interface is not yet known).
.Sp
If no optional rule parameters are given, then the transparent
cache will be setup on all network interfaces for all \s-1HTTP\s0
traffic (use this with care since you are risking to serve
requests from the internet using your squid).
.IP "\(bu Locally \s-1HTTP\s0 traffic" 2
.IX Item "Locally HTTP traffic"
Locally generated \s-1HTTP\s0 traffic except traffic generated by processes
running as user \fIuser\fR. The optional rule parameters inface, outface
and src are ignored for this type of traffic.
.Sp
This kind of matching makes it possible to support transparent caching
for \s-1WEB\s0 browsers running on the firewall host, as far as they do not
run as the user excluded. More than one users can be specified by 
space-separating and enclosing them in double quotes.
.Sp
This rule can be disabled by specifing as user the empty string: ""
.RE
.RS 2
.Sp
Examples:
.Sp
.RS 2
transparent_squid 3128 squid inface eth0 src 10.0.0.0/8
.Sp
transparent_squid 8080 \*(L"squid privoxy root bin\*(R" inface not \*(L"ppp+ ipsec+\*(R" dst not \*(L"a.not.proxied.server\*(R" 
.RE
.RE
.RS 2
.RE
.Sh "nat <type> <target> [optional rule parameters]"
.IX Subsection "nat <type> <target> [optional rule parameters]"
.RS 2
The nat helper sets up a \s-1NAT\s0 rule for routed traffic.
.Sp
The type parameter can be:
.IP "to-source" 2
.IX Item "to-source"
Defines a Source \s-1NAT\s0 (created in \s-1NAT/POSTROUTING\s0).
.Sp
The \fItarget\fR in this case is the source address to be set in packets 
matching the optional rule parameters (if no optional rule parameters,
all forwarded traffic will be matched). \fItarget\fR accepts all 
\&\-\-to\-source values iptables accepts (see iptables \-j \s-1SNAT\s0 \-\-help).
Multiple \-\-to\-source values can be given, if separated by space and
quoted as a single argument.
.Sp
inface should not be used in \s-1SNAT\s0, because iptables does provide
this information at this point.
.IP "to-destination" 2
.IX Item "to-destination"
Defines a Destination \s-1NAT\s0 (created in \s-1NAT/PREROUTING\s0).
.Sp
The \fItarget\fR in this case is the destination address to be set in packets
matching the optional rule parameters (if no optional rule parameters,
all forwarded traffic will be matched). \fItarget\fR accepts all \-\-to\-destination
values iptables accepts (see iptables \-j \s-1DNAT\s0 \-\-help). Multiple
\&\-\-to\-destination values can be given, if separated by space and quoted
as a single argument.
.Sp
outface should not be used in \s-1DNAT\s0, because iptables does provide
this information at this point.
.IP "redirect-to" 2
.IX Item "redirect-to"
Catches traffic comming in and send it to the local machine (created
in \s-1NAT/PREROUTING\s0).
.Sp
The \fItarget\fR in this case is a port or a range of ports (\s-1XXX\-YYY\s0) that
packets matching the rule will be redirected to (if no optional rule
parameters are given, all incomming traffic will be matched). \fItarget\fR
accepts all \-\-to\-ports values iptables accepts (see iptables \-j 
\&\s-1REDIRECT\s0 \-\-help).
.Sp
outface should not be used in \s-1REDIRECT\s0, because iptables does provide
this information at this point.
.RE
.RS 2
.Sp
Please understand that the optional rule parameters are used only
to limit the traffic to be matched. Consider these examples:
.IP "Sends to 1.1.1.1 all traffic comming in or passing trhough the firewall host:" 2
.IX Item "Sends to 1.1.1.1 all traffic comming in or passing trhough the firewall host:"
nat to-destination 1.1.1.1	
.IP "Redirects to 1.1.1.1 all traffic comming in or passing through, and going to 2.2.2.2:" 2
.IX Item "Redirects to 1.1.1.1 all traffic comming in or passing through, and going to 2.2.2.2:"
.Vb 1
\&  nat to-destination 1.1.1.1 dst 2.2.2.2
.Ve
.IP "Redirects to 1.1.1.1 all \s-1TCP\s0 traffic comming in or passing through and going to 2.2.2.2:" 2
.IX Item "Redirects to 1.1.1.1 all TCP traffic comming in or passing through and going to 2.2.2.2:"
.Vb 1
\&  nat to-destination 1.1.1.1 proto tcp dst 2.2.2.2
.Ve
.IP "Redirects to 1.1.1.1 all traffic comming in or passing through and going to 2.2.2.2 to port tcp/25:" 2
.IX Item "Redirects to 1.1.1.1 all traffic comming in or passing through and going to 2.2.2.2 to port tcp/25:"
.Vb 1
\&  nat to-destination 1.1.1.1 proto tcp dport 25 dst 2.2.2.2
.Ve
.RE
.RS 2
.Sp
More examples:
.Sp
.RS 2
nat to-source 1.1.1.1 outface eth0 src 2.2.2.2 dst 3.3.3.3
.Sp
nat to-destination 4.4.4.4 inface eth0 src 5.5.5.5 dst 6.6.6.6
.Sp
nat redirect-to 8080 inface eth0 src 2.2.2.0/24 proto tcp dport 80 
.RE
.RE
.RS 2
.RE
.Sh "snat [to] <target> [optional rule parameters]"
.IX Subsection "snat [to] <target> [optional rule parameters]"
.RS 2
The snat helper sets up a Source \s-1NAT\s0 rule for routed traffic, by calling
nat to-source \fItarget\fR [optional rule parameters]
.Sp
See the nat helper.
.Sp
Example:
.Sp
.RS 2
snat to 1.1.1.1 outface eth0 src 2.2.2.2 dst 3.3.3.3 
.RE
.RE
.RS 2
.RE
.Sh "dnat [to] <target> [optional rule parameters]"
.IX Subsection "dnat [to] <target> [optional rule parameters]"
.RS 2
The dnat helper sets up a Destination \s-1NAT\s0 rule for routed traffic, by calling
nat to-destination \fItarget\fR [optional rule parameters]
.Sp
See the nat helper.
.Sp
Example:
.Sp
.RS 2
dnat to 1.1.1.1 inface eth0 src 2.2.2.2 dst 3.3.3.3 
.RE
.RE
.RS 2
.RE
.Sh "redirect [to] <target> [optional rule parameters]"
.IX Subsection "redirect [to] <target> [optional rule parameters]"
.RS 2
The redirect helper catches all incomming traffic matching the optional rule
parameters given and redirects it to ports on the local host, by calling
nat redirect-to \fItarget\fR [optional rule parameters]
.Sp
See the nat helper.
.Sp
Example:
.Sp
.RS 2
nat redirect-to 8080 inface eth0 src 2.2.2.0/24 proto tcp dport 80 
.RE
.RE
.RS 2
.RE
.SH "Actions"
.IX Header "Actions"
Actions are the actions to be taken on services and traffic described
by other commands and functions. Please note that normally, FireHOL
will pass-through to the generated iptables statements all the possible
actions iptables accepts, but only the ones defined here can be used 
with lower case letters and currently it will be impossible to pass 
arguments to some unknown action. Also, keep in mind that the iptables
action \s-1LOG\s0 is a FireHOL optional rule parameter (see log and loglimit)
that can be defined together with one of the following actions and
FireHOL will actually produce multiple iptables statements to achieve
both the logging and the action.
.Sh "accept"
.IX Subsection "accept"
.RS 2
accept allows the traffic matching the rules to reach its destination.
.Sp
Example:
.Sp
.RS 2
server smtp accept, to allow \s-1SMTP\s0 requests and their replies to flow. 
.RE
.RE
.RS 2
.RE
.Sh "reject [with message]"
.IX Subsection "reject [with message]"
.RS 2
reject discards the matching traffic but sends a rejecting message back to the sender.
.Sp
with is used to offer control on the message to be returned to the sender. with accepts
all the arguments the \-\-reject\-with iptables expression accepts. For an updated list of
these messages type iptables \-j \s-1REJECT\s0 \-\-help. 
.Sp
Examples:
.Sp
.RS 2
policy reject with host-unreach
.Sp
server ident reject with tcp-reset
.Sp
UNMATCHED_INPUT_POLICY=\*(L"reject with host\-prohib\*(R"
.RE
.RE
.RS 2
.RE
.Sh "drop"
.IX Subsection "drop"
.RS 2
drop silently discards the matching traffic. The fact that the traffic
is silently discarded makes the sender timeout in order to conclude
that it is not possible to use the wanted service.
.Sp
Example: 
.Sp
.RS 2
server smtp drop, to silently discard \s-1SMTP\s0 requests and their replies. 
.RE
.RE
.RS 2
.RE
.Sh "deny"
.IX Subsection "deny"
.RS 2
deny is just an alias for drop, made for those who are used to ipchains
terminology.
.Sp
Example: 
.Sp
.RS 2
server smtp deny, to silently discard \s-1SMTP\s0 requests and their replies. 
.RE
.RE
.RS 2
.RE
.Sh "return"
.IX Subsection "return"
.RS 2
return will return the flow of processing to the parent of the current command.
Currently, it has meaning to specify the action return only as a policy to some
interface.
.Sp
Example: 
.IP "policy return" 2
.IX Item "policy return"
Traffic not matched by any rule within an interface continues traveling
through the firewall and is possibly matched by other interfaces bellow. 
.RE
.RS 2
.RE
.Sh "mirror"
.IX Subsection "mirror"
.RS 2
\&\fImirror\fR will return the traffic to the wanted port, back to the sending
host. Use this with care, and only if you understand what you doing.
Keep also in mind that FireHOL will apply this action to both requests
and replies comming in or passing through, and will replace it with 
\&\s-1REJECT\s0 for traffic generated by the local host.
.RE
.Sh "redirect [to\-port port]"
.IX Subsection "redirect [to-port port]"
.RS 2
\&\fIredirect\fR is used internally by FireHOL Helper Commands to redirect 
traffic to ports on the local host. Unless you are a developer,
you will never need to use this directly.
.RE
.SH "Optional Rule Parameters"
.IX Header "Optional Rule Parameters"
Optional rule parameters are accepted by many commands to narrow 
the match they do by default. The parameters described bellow are
all that FireHOL supports. You should check the documentation of 
each command to find which parameters should not be used with it.
Normally, all FireHOL commands are designed so that if you specify
a parameters that is also used internally, the internal one will
overwrite the one given in the configuration file. In such a case,
FireHOL will present you a warning with the old and the new value.
.PP
Not all parameters should be used in all cases. For example \fIsport\fR
and \fIdport\fR should not be used in normal server and client commands
since such ports are internally defined by the services themselves.
In any case, FireHOL will complain about optional rule parameters
that should not be used in certain commands.
.Sh "src [not] <host>"
.IX Subsection "src [not] <host>"
.RS 2
\&\fIsrc\fR defines the source \s-1IP\s0 address of the \s-1REQUEST\s0. If \fIsrc\fR is 
defined on a server statement it matches the source of the request 
which is the remote host, while if it is defined on a client 
statement it matches again the source of the request, but this time
it is the local host. Focus on the \s-1REQUEST\s0!!! Forget the reply.
.Sp
\fIParameters\fR
.IX Subsection "Parameters"
.IP "not" 2
.IX Item "not"
Optional argument that reverses the match. When defined, the rule will
match all hosts except the ones defined. Example: 
  server smtp accept src not 1.2.3.4
.IP "\fIhost\fR" 2
.IX Item "host"
An \s-1IP\s0 address, a hostname, or a subnet. Multiple hosts/networks can be
defined if separated by space and quoted as a single argument. Examples:
  server smtp accept src 1.2.3.4
  server smtp accept src not \*(L"1.2.3.0/24 5.6.7.8 badhost.example.com\*(R" 
.RE
.RS 2
.RE
.Sh "dst [not] <host>"
.IX Subsection "dst [not] <host>"
.RS 2
\&\fIdst\fR defines the destination of the \s-1REQUEST\s0. If dst is defined on a server
statement it matches the destination of the request which is the local
host, while if it is defined on a client statement it matches again
the destination of the request, but this time it is the remote host.
Focus on the \s-1REQUEST\s0!!! Forget the reply.
.Sp
\&\fIdst\fR accepts the same parameters as src.
.RE
.Sh "inface [not] <interface>"
.IX Subsection "inface [not] <interface>"
.RS 2
\&\fIinface\fR defines the interface the \s-1REQUEST\s0 is received via. inface cannot
be used in interface commands.
.Sp
\fIParameters\fR
.IX Subsection "Parameters"
.IP "not" 2
.IX Item "not"
An optional argument that reverses the match. When defined, the rule will
match all interfaces except the ones defined. Example:
  server smtp accept inface not eth0
.IP "\fIinterface\fR" 2
.IX Item "interface"
if an interface name in the same format the interface command accepts.
Multiple interfaces can be defined if separated by space and quoted as
a single argument. Examples:
  server smtp accept inface not eth0
  server smtp accept inface not \*(L"eth0 eth1\*(R"
.RE
.RS 2
.RE
.Sh "outface [not] <interface>"
.IX Subsection "outface [not] <interface>"
.RS 2
\&\fIoutface\fR defines the interface the \s-1REQUEST\s0 is send via. outface cannot
be used in interface commands.
.Sp
\&\fIoutface\fR accepts the same parameters as inface. 
.RE
.Sh "custom <parameters>"
.IX Subsection "custom <parameters>"
.RS 2
\&\fIcustom\fR passes its arguments to the generated iptables commands.
.Sp
It is required to quote all the parameters given to custom. If the
parameters include a space character between some text that is 
required to be given to iptables as one argument, it is required
to escape another set of quotes in order. Another way is to use
double quotes externally and single quotes internally.
.Sp
Examples:
.Sp
.Vb 1
\&  server smtp accept custom "--some-iptables-option and_its_value"
.Ve
.Sp
.Vb 1
\&  server smtp accept custom "--some-iptables-option 'one_value another_value'
.Ve
.RE
.ie n .Sh "log ""<some text>"" [level a_level]"
.el .Sh "log ``<some text>'' [level a_level]"
.IX Subsection "log ""<some text>"" [level a_level]"
.RS 2
\&\fIlog\fR will log the matching packets to syslog. Note that this is not an
action (in iptables it is). FireHOL will actually produce multiple
iptables commands to accomplish both the action for the rule and the
logging. You can control how logging works, by altering the variables
\&\s-1FIREHOL_LOG_OPTIONS\s0 and \s-1FIREHOL_LOG_LEVEL\s0. You can also change the
level of just one rule by using the level argument of the log parameter.
.Sp
FireHOL logs traffic, exactly the same way iptables does. Many users have
complained about packet logs appearing at their console. To avoid this 
you will have to:
.IP "\(bu setup klogd to log only more important traffic" 2
.IX Item "setup klogd to log only more important traffic"
.PD 0
.IP "\(bu change \s-1FIREHOL_LOG_LEVEL\s0 to log at a not so important log-level" 2
.IX Item "change FIREHOL_LOG_LEVEL to log at a not so important log-level"
.RE
.RS 2
.PD
.Sp
Actually klogd's \-c option and iptables' \-\-log\-level option are the same
thing (iptables accepts also the numeric values klogd accepts). If
iptables logs at a higher priority than klogd is configured to use,
then your packets will appear in the console too.
.RE
.ie n .Sh "loglimit ""<some text>"""
.el .Sh "loglimit ``<some text>''"
.IX Subsection "loglimit ""<some text>"""
.RS 2
\&\fIloglimit\fR is the same with log but limits the frequency of logging 
according to the setting of \s-1FIREHOL_LOG_FREQUENCY\s0 and \s-1FIREHOL_LOG_BURST\s0.
.RE
.Sh "proto [not] <protocol>"
.IX Subsection "proto [not] <protocol>"
.RS 2
\&\fIproto\fR sets the required protocol for the traffic. This command 
accepts anything iptables accepts as protocols.
.RE
.Sh "limit <frequency> <burst>"
.IX Subsection "limit <frequency> <burst>"
.RS 2
\&\fIlimit\fR will limit the match in both directions of the traffic 
(request and reply). This is used internally by FireHOL and its
effects has not been tested in the high level configuration file
directives.
.RE
.Sh "sport <port>"
.IX Subsection "sport <port>"
.RS 2
\&\fIsport\fR defines the source port of a request. It accepts port 
names, port numbers, port ranges (\s-1FROM:TO\s0) and multiple ports
(or ranges) seperated by spaces and quoted as a single argument.
This parameter should not be used in normal services definitions
(client and server commands) or interface and router definitions,
unless you really understand what you are doing.
.RE
.Sh "dport <port>"
.IX Subsection "dport <port>"
.RS 2
\&\fIdport\fR defines the destination port of a request. It accepts port
names, port numbers, port ranges (\s-1FROM:TO\s0) and multiple ports (or
ranges) seperated by spaces and quoted as a single argument. This 
parameter should not be used in normal services definitions (client
and server commands) or interface and router definitions, unless you
really understand what you are doing.
.RE
.Sh "uid [not] <user> =head2 user [not] <user>"
.IX Subsection "uid [not] <user> =head2 user [not] <user>"
.RS 2
\&\fIuid\fR or \fIuser\fR define the operating system user sending this
traffic. The parameter can be a username, a user number or a list
of these two, seperated by spaces and quoted as a single argument.
.Sp
This parameter can be used only in services (client and server
commands) defined within interfaces, not routers. FireHOL is 
\&\*(L"smart\*(R" enough to apply this parameter only to traffic send by 
the localhost, i.e. the replies of servers and requests of 
clients. It is not possible, and FireHOL will simply ignore 
this parameter, on traffic coming in or passign through the 
firewall host.
.Sp
Example 1:
.Sp
.Vb 1
\&  client "pop3 imap" accept user not "user1 user2 user3" dst mymailer.example.com
.Ve
.RE
.RS 2
.Sp
The above will allow local users except user1, user2 and user3 to use
\&\s-1POP3\s0 and \s-1IMAP\s0 services on mymailer.example.com. You can use this, for
example, to allow only a few of the local users use the fetchmail
program to fetch their mail from the mail server.
.Sp
Example 2: 
.Sp
.Vb 1
\&  server http accept user apache
.Ve
.RE
.RS 2
.Sp
The above will allow all \s-1HTTP\s0 to reach the local http server, but only
if the web server is running as user apache the replies will be send
back to the \s-1HTTP\s0 client. 
.RE
.Sh "gid <group> =head2 group <group>"
.IX Subsection "gid <group> =head2 group <group>"
.RS 2
\&\fIgid\fR or \fIgroup\fR define the operating system user group sending this
traffic. The parameter can be a group name, a group number or a list of
these two, seperated by spaces and quoted as a single argument.
.Sp
This parameter can be used only in services (client and server commands)
defined within interfaces, not routers. FireHOL is \*(L"smart\*(R" enough to
apply this parameter only to traffic send by the localhost, i.e. the 
replies of servers and requests of clients. It is not possible, and 
FireHOL will simply ignore this parameter, on traffic coming in or
passing through the firewall host. 
.RE
.Sh "pid <process> =head2 process <process>"
.IX Subsection "pid <process> =head2 process <process>"
.RS 2
\&\fIpid\fR or \fIprocess\fR define the operating system process \s-1ID\s0 (or \s-1PID\s0) 
sending this traffic. The parameter can be a \s-1PID\s0 or a list of PIDs,
seperated by spaces and quoted as a single argument.
.Sp
This parameter can be used only in services (client and server
commands) defined within interfaces, not routers. FireHOL is \*(L"smart\*(R"
enough to apply this parameter only to traffic send by the localhost,
i.e. the replies of servers and requests of clients. It is not
possible, and FireHOL will simply ignore this parameter, on traffic
coming in or passign through the firewall host. 
.RE
.Sh "sid <session> =head2 session <session>"
.IX Subsection "sid <session> =head2 session <session>"
.RS 2
\&\fIsid\fR or \fIsession\fR define the operating system session \s-1ID\s0 of the 
process sending this traffic (The session \s-1ID\s0 of a process is the 
process group \s-1ID\s0 of the session leader). The parameter can be a list
of such IDs, seperated by spaces and quoted as a single argument.
.Sp
This parameter can be used only in services (client and server 
commands) defined within interfaces, not routers. FireHOL is \*(L"smart\*(R"
enough to apply this parameter only to traffic send by the localhost,
i.e. the replies of servers and requests of clients. It is not
possible, and FireHOL will simply ignore this parameter, on traffic
coming in or passign through the firewall host. 
.RE
.SH "Variables that control FireHOL"
.IX Header "Variables that control FireHOL"
.Sh "\s-1DEFAULT_INTERFACE_POLICY\s0"
.IX Subsection "DEFAULT_INTERFACE_POLICY"
.RS 2
\&\fI\s-1DEFAULT_INTERFACE_POLICY\s0\fR controls the default action to be taken
on traffic not matched by any rule within an interface. Actually, 
this is a global setting for what policy does for an interface.
.Sp
All packets that reach the end of an interface are logged only if the
action is not return or accept. You can control the frequency of this
logging by altering the frequency loglimit uses.
.Sp
.Vb 1
\& Default: DEFAULT_INTERFACE_POLICY="DROP"
.Ve
.Sp
.Vb 1
\& Example: DEFAULT_INTERFACE_POLICY="REJECT"
.Ve
.RE
.Sh "\s-1UNMATCHED_INPUT_POLICY\s0"
.IX Subsection "UNMATCHED_INPUT_POLICY"
.Sh "\s-1UNMATCHED_OUTPUT_POLICY\s0"
.IX Subsection "UNMATCHED_OUTPUT_POLICY"
.Sh "\s-1UNMATCHED_FORWARD_POLICY\s0"
.IX Subsection "UNMATCHED_FORWARD_POLICY"
.RS 2
\&\fI\s-1UNMATCHED_INPUT_POLICY\s0\fR controls the default action to be taken for
incoming traffic not matched by any interface command.
.Sp
\&\fI\s-1UNMATCHED_OUTPUT_POLICY\s0\fR controls the default action to be taken for
outgoing traffic not matched by any interface command.
.Sp
\&\fI\s-1UNMATCHED_FORWARD_POLICY\s0\fR controls the default action to be taken for
forwarded traffic not matched by any router command.
.Sp
All variables accept all the Actions FireHOL supports.
.Sp
All packets that reach the end of firewall in all three chains are
logged (always, regardless of these settings). You can control the
frequency of this logging by altering the frequency loglimit uses.
.Sp
.Vb 1
\& Default: UNMATCHED_INPUT_POLICY="DROP"
.Ve
.Sp
.Vb 1
\& Default: UNMATCHED_OUTPUT_POLICY="DROP"
.Ve
.Sp
.Vb 1
\& Default: UNMATCHED_FORWARD_POLICY="DROP"
.Ve
.Sp
.Vb 1
\& Example: UNMATCHED_INPUT_POLICY="REJECT"
.Ve
.Sp
.Vb 1
\& Example: UNMATCHED_OUTPUT_POLICY="REJECT"
.Ve
.Sp
.Vb 1
\& Example: UNMATCHED_FORWARD_POLICY="REJECT"
.Ve
.RE
.Sh "\s-1FIREHOL_LOG_LEVEL\s0 =head2 \s-1FIREHOL_LOG_OPTIONS\s0 =head2 \s-1FIREHOL_LOG_FREQUENCY\s0 =head2 \s-1FIREHOL_LOG_BURST\s0"
.IX Subsection "FIREHOL_LOG_LEVEL =head2 FIREHOL_LOG_OPTIONS =head2 FIREHOL_LOG_FREQUENCY =head2 FIREHOL_LOG_BURST"
.RS 2
\&\fI\s-1FIREHOL_LOG_LEVEL\s0\fR controls the level at which iptables will log 
things to the syslog. For a description of the possible values
supported and for per-rule control of log level, see the log optional 
rule parameter.
.Sp
\&\fI\s-1FIREHOL_LOG_OPTIONS\s0\fR controls the way iptables will log things to 
the syslog. The value of this variable is passed as is to iptables,
so use exact iptables parameters.
.Sp
\&\fI\s-1FIREHOL_LOG_FREQUENCY\s0\fR and \fI\s-1FIREHOL_LOG_BURST\s0\fR (added in v1.39 of
FireHOL) control the frequency at each each logging rule will write
packets to the syslog. \s-1FIREHOL_LOG_FREQUENCY\s0 is set to the maximum
average frequency and \s-1FIREHOL_LOG_BURST\s0 specifies the maximum
initial number of packets to match.
.Sp
.Vb 1
\& Default: FIREHOL_LOG_OPTIONS="--log-level warning"
.Ve
.Sp
.Vb 1
\& Default: FIREHOL_LOG_FREQUENCY="1/second"
.Ve
.Sp
.Vb 1
\& Default: FIREHOL_LOG_BURST="5"
.Ve
.Sp
.Vb 1
\& Example: FIREHOL_LOG_OPTIONS="--log-level info --log-tcp-options --log-ip-options"
.Ve
.Sp
.Vb 1
\& Example: FIREHOL_LOG_FREQUENCY="30/minute"
.Ve
.Sp
.Vb 1
\& Example: FIREHOL_LOG_BURST="2"
.Ve
.Sp
To see the available iptables log options, run \f(CW\*(C`/sbin/iptables \-j LOG \-\-help\*(C'\fR
To see what iptables accepts as frequencies and bursts, run
\&\f(CW\*(C`/sbin/iptables \-m limit \-\-help\*(C'\fR 
.Sp
You can also check man iptables.
.RE
.Sh "\s-1DEFAULT_CLIENT_PORTS\s0"
.IX Subsection "DEFAULT_CLIENT_PORTS"
.RS 2
\&\fI\s-1DEFAULT_CLIENT_PORTS\s0\fR controls the port range to be used when a 
remote client is specified. For localhost clients, FireHOL finds 
the exact client ports by querying the kernel options.
.Sp
.Vb 1
\& Default: 1000:65535
.Ve
.Sp
.Vb 1
\& Example: DEFAULT_CLIENT_PORTS="0:65535"
.Ve
.RE
.Sh "\s-1FIREHOL_NAT\s0"
.IX Subsection "FIREHOL_NAT"
.RS 2
If \fI\s-1FIREHOL_NAT\s0\fR is set to 1, FireHOL will load \s-1NAT\s0 kernel modules
for those services that they are require such. FireHOL sets this 
to 1 automatically if you use the Helper Commands that do \s-1NAT\s0.
.Sp
.Vb 1
\& Default: FIREHOL_NAT="0"
.Ve
.Sp
.Vb 1
\& Example: FIREHOL_NAT="1"
.Ve
.RE
.Sh "\s-1FIREHOL_AUTOSAVE\s0"
.IX Subsection "FIREHOL_AUTOSAVE"
.RS 2
\&\s-1FIREHOL_AUTOSAVE\s0 controls the file that will be created when FireHOL
is called with the save command line argument. If this variable is
empty (the default), FireHOL will try to detect where to save the 
file. Currently, the RedHat way (/etc/sysconfig/iptables) and the
Debian way (/var/lib/iptables/autosave) are automatically detected
(in the order given here) based on the existance of the directory 
this file should be created in.
.Sp
Default: FIREHOL_AUTOSAVE="\*(L"
Example: FIREHOL_AUTOSAVE=\*(R"/tmp/firehol\-saved.txt" 
.RE
.SH "Variables that FireHOL offers"
.IX Header "Variables that FireHOL offers"
.Sh "\s-1RESERVED_IPS\s0"
.IX Subsection "RESERVED_IPS"
.RS 2
This variable includes all the \s-1IP\s0 addresses defined as \s-1IANA\s0 \- Reserved
by \s-1IANA\s0.
.Sp
.Vb 1
\& Example: interface eth0 internet src not "${RESERVED_IPS}"
.Ve
.RE
.Sh "\s-1PRIVATE_IPS\s0"
.IX Subsection "PRIVATE_IPS"
.RS 2
This variable includes all the \s-1IP\s0 addresses defined as Private or
Test by \s-1RFC\s0 3330.
.Sp
.Vb 1
\& Example: interface eth0 internet src not "${PRIVATE_IPS}"
.Ve
.RE
.Sh "\s-1UNROUTABLE_IPS\s0"
.IX Subsection "UNROUTABLE_IPS"
.RS 2
This variable is both \fI\s-1RESERVED_IPS\s0\fR and \fI\s-1PRIVATE_IPS\s0\fR together. I suggest
to use this variable on interfaces and routers accepting Internet traffic.
.Sp
.Vb 1
\& Example: interface eth0 internet src not "${UNROUTABLE_IPS}"
.Ve
.RE
.SH "FILES"
.IX Header "FILES"
\&\fI/etc/firehol/firehol.conf\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
firehol written by Costa Tsaousis <costa@tsaousis.gr>.
.PP
Man page written by Marc Brockschmidt <<marc@marcbrockschmidt.de>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIfirehol\fR\|(1), \fIiptables\fR\|(8), \fIbash\fR\|(1)
